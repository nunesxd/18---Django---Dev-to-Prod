>>> Inicialmente criamos o nosso projeto localmente e utilizamos o 'venv' (Virtual Enviroment) para estabelecer o ambiente virtual, o venv é uma biblioteca integrada ao Python. Comando para instalar:
-- python -m venv ./venv (O './venv' é o local ao qual queremos criar nosso ambiente virtual)

-- python manage.py runserver 
>>> Roda o nosso servidor, se este nunca foi inicializado, cria a pasta principal do projeto (ou app), com os respectivos arquivos base.

-- python manage.py startapp pages
>>> Cria um novo app em nosso site, lembrando que é necessário incluí-lo no array 'INSTALLED_APPS', dentro do script 'settings', no projeto principal (sintaxe: 'XXXX.apps.XXXXConfig' - XXXX sendo o nome do novo app).

>>> Criamos um 'urls.py' dentro do app 'pages', este arquivo irá conter as rotas. Este arquivo não é criado por padrão pelo django.
Dentro de 'urls.py', associamos as views criadas junto as suas respectivas rotas.
Por fim, adicionamos a nova rota dentro do 'urls.py' do app principal 'btre', de forma que a url principal, o root de nosso site, seja sempre do app 'pages'.
. OBS: Poderíamos colocar como 'pages/', mas usando apenas o '', nós deixamos a pagina index como sendo a principal de nosso site;

>>> Adicionamos em 'settings.py', no array JSON 'TEMPLATES', item 'DIRS', o local de nossa pasta de templates.
Criamos os templates específicos para a landing page 'pages', e atualizamos o 'urls' para acessa-los.
Criamos o template 'base.html' para extender nos demais templates que serão usados no site, usando o jinja ({%  %}) para possibilitar a passagem de variáveis e demais conteúdos.

>>> Adicionamos os arquivos estáticos (css, js, img's, etc.) ao projeto dentro da pasta principal 'btre'.
Adicionamos ao 'settings.py', as demais variáveis relacionadas: 'STATIC_ROOT', 'STATICFILES_DIRS'.
-- python manage.py collectstatic
Por fim, rodamos o comando acima para consolidar na pasta do 'STATIC_ROOT', os arquivos separados nos diretórios 'STATICFILES_DIRS', dentre outros, como os do 'admin', que é criado por padrão pelo django.
Não é recomendado realizarmos o upload destes arquivos no GIT, por isso esta pasta é adicionada ao '.gitignore'. Usamos o site 'https://www.gitignore.io/' para criarmos um gitignore completo para o django, com todas as pastas e arquivos que geralmente são desconsiderados.

>>> Desenvolvemos os templates criados anteriormente, integrando o bootstrap e demais bibliotecas usadas. Lembrando que devemos mudar o diretório dos arquivos estáticos, transformando-os em variáveis, para isso devemos usar o Jinja, comandos usados: '{% load static %}' (no inicio do arquivo), '{% block content %}' '{% endblock %}', '{% static 'css/all.css'%}' (para cada arquivo estático utilizado).

>>> Utilizamos o 'partials' para segregar o html base ainda mais, entre 'top bar', 'nav bar' e 'footer'. Por boas práticas, devemos nomear os htmls do partials com um '_' na frente.

>>> Copiamos o conteúdo HTML para os respectivos templates, lembrando da necessidade de mudar alguns referênciais posteriormente, refletindo a necessidade de dinamicidade do código.
. OBS: O 'extends' dos partials, sempre deve ser a primeira linha do código, mesmo com o 'load static'.
Outra alteração que fazemos é o 'linking' entre as partes do site, para isso usamos: {% url 'XXXX' %} (XXXX sendo o respectivo html, mas sem a extensão 'html' no final). Este código usa a variável 'name' que demos ao app 'pages', nas rotas 'index', 'about', etc.
Uma outra funcionalidade adicionada é a adição do 'active' no HTML do '_navbar' de forma dinâmica. Para isso devemos usar os condicionais do Jinja, exemplo: 
-- {% if '/' == request.path %} ou {% if 'about' in request.path %}
    class="active"
{% else %}
    class=""
{% endif %}

>>> Criamos os demais apps da página: 'listings' e 'realtors', criando também um arquivo de urls para eles, adicionando-os aos apps no 'settings'. A ideia aqui é terminar o desenvolvimento do front-end, para seguirmos com o back-end.
Quanto as rotas do app 'listings', além do template de todos os listings, também queremos o acesso a um listing específico, para isso, o usuário deverá passar o respectivo id pela URL, isso pode ser feito pelo comando: '<int:listing_id>' (onde 'int' é o tipo do dado que estamos recebendo, um tipo de parser).

>>> Criamos a nossa base de dados chamada 'btre', o curso se utiliza do Postgres, mas iremos utilizar o SQL Server.
Para conexão com o django, baixamos o pacote 'mssql-django' e configuramos o django adequadamente, com atenção a configuração da porta, que retorna um erro caso não seja feita corretamente.

>>> Com a base criada, criamos o modelo, que é uma classe de nome singular e com a primeira letra maiúscula.
Vamos aos comandos comuns:
- 'on_delete=models.DO_NOTHING': Refere ao que se fazer quanto a deleção do item na tabela secundária, se a primaria deve ou não manter as informações, nesse caso ela deve manter;
- 'models.CharField(max_length=200)': Campo de texto comum, onde podemos setar algumas configurações, como o tamanho máximo do campo;
- 'models.TextField(blank=True)': Também um campo de texto, mas permite um tamanho maior, o blank faz com que o campo seja opcional;
- 'models.IntegerField()': Campo inteiro, não é necessário passar nenhum outro parâmetro;
- 'models.DecimalField(max_digits=2, decimal_places=1)': Campo de número float, onde podemos definir a quantidade de números e o número de decimais, por parâmetro;
- 'models.ImageField(upload_to='photos/%Y/%m/%d/')': Campo especial para fotos no Django. Dentro da base de dados este campo será um string, mas o Django considera o campo de uma forma diferente. Passamos por parâmetro a pasta que queremos que o Django salve temporariamente os arquivos (o django criará uma pasta chamada 'midia' e uma outra com o nome que especificarmos, diferenciando por datas).
Além da definição dos campos no modelo, definimos também o campo principal que será apresentado nas tabelas, através do comando abaixo:
-- def __str__(self):
    return self.title

. OBS: É possível acessarmos qualquer outro app diretamente pelo código, usando o 'from [app].[modulo] import [item]' mesmo.

-- python manage.py makemigration
>>> Este comando cria um arquivo que possibilita a criação das tabelas na base de dados, mas as bases não são criadas imediatamente.

-- python manage.py sqlmigrate listings 0001
>>> Nos é apresetando o comando SQL capaz da criação da respectiva tabela na base de dados. 'listings' é o nome do app, que será o nome da tabela, '0001' é o nome do arquivo criado pelo comando 'makemigrations', que contém os detalhes de todos os campos a serem criados, embora não estejam em SQL ainda.
Por fim, rodamos o 'migrate', que gera de fato a tabela com os respectivos campos.

>>> O Django já possui um local específico para os admins, basta abrir o servidor e acessar o seu link + '/admin'. O problema é que não temos um usuários admin logo no começo, devemos criá-lo com comando abaixo:
-- python manage.py createsuperuser
A princípo, os usuários admin só tem acesso para adicionar usuários e grupos ao site. Dentro do módulo principal do projeto 'btre', temos um módulo de 'admin'. Nele podemos adicionr os respectivos modelos para serem manipulados pelos super usuários, ex:
-- admin.site.register(Listing)
Onde 'Listing' é o modelo que criamos, lembrando que devemos importar os modelos para serem 'registrados' no módulo admin.

>>> Adicionamos algumas configurações para a pasta de 'media' (parecido com o que foi feito para os arquivos estáticos - variáveis 'MEDIA_ROOT' e 'MEDIA_URL'), que irá conter as fotos que configuramos em nosso banco de dados.
Para usarmos a pasta, adicionamos-a ao módulo 'urls.py' do projeto principal 'btre', ex:
-- urlpatterns = [] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Ao adicionarmos os realtors e os listings, é possível identificar que as imagens foram adicionadas a pasta 'media' dentro do projeto, separando pela data da inserção da imagem.

>>> Em seguida, queremos customizar o site do 'admin', como o site já existe internamente no Django, podemos tirar proveito disso e apenas alterar aquilo que queremos, exemplo:
O template deve ser chamado como 'base_site.html', dentro da pasta 'admin'. 
Dentro do html / jinja, devemos extender 'admin/base.html' e podemos alterar o bloco 'branding', desta forma podemos alterar a parte que fica como 'Django Administration'.
Também podemos acrescentar um novo arquivo stylesheet, usando o bloco 'extrastyle'. Podemos usar o dev console para identificar os respectivos ids e classes que podemos substituir.

>>> Uma outra customização que pode ser feita é a de mostrar mais campos dos modelos nas listagens que aparecem no admin.
Para isso, nós devemos acrescentar as opções dentro do módulo 'admin.py' do app que queremos alterar, no caso 'listings', exemplo:
-- class XXXXAdmin(admin.ModelAdmin):
O 'ModelAdmin' nos permite acessar diversos atributos especificos da exibição em tabelas (O XXXX é o nome do modelo basicamente).
. OBS: Ocorreu um bug de apresentação do contéudo dentro da sessão de adição de itens para os apps, onde o navbar sticky aparecia com width 100%, para resolver esse problema, nós resetamos o cache pelas últimas 24 hrs.

>>> Agora iremos obter os dados de nosso banco de dados e apresentá-los dentro de nossos templates.
Para isso, dentro de 'views.py' do respectivo app, devemos importar o modelo e seguir um pequeno padrão que se é utilizado.
Primeiro criamos uma variável contendo um dicionário (por convenção o nome deve ser 'context'), com os dados que queremos passar ao template, e depois passamos este dicionário como um terceiro parâmetro para o método 'render'. Exemplo de dicionário:
-- context = {"name": "Rafael"}
Este dicionário pode ser acessado no template usando:
-- {{ name }}
Mas antes, obtemos do banco todos os dados que desejamos passar ao template, usando:
-- [variável] = [modelo].objects.all()
Uma outra opção ao '.all', que mostra os itens desorganizados, podemos usar o '.order_by([-,+][campo])' para ordenar a nossa lista, o '-' e '+' é ascendente ou descendente.
Também podemos filtar a nossa base, como no caso onde não queremos apresentar no site os imóveis que não estiverem publicados, adicionando o código abaixo ao select do object acima:
-- .filter(is_published=True) (Onde o campo que está em parenteses será o filtro)

>>> Dentro do template de 'listings', por exemplo, verificamos primeiro se a lista existe, usando:
-- {% if listings %} {% else %} {% endif %}
Caso encontre, podemos usar o jinja para fazer um loop entre as iterações, usando:
-- {% for listing in listings %} {% endfor %}
Continuando com o preenchimento dinâmico de nosso template, a próxima etapa seria colocar os campos do modelo em nosso template, conforme mencionado anteriormente. Cabe ressaltar que a imagem pode ser acessada fazendo:
-- {{ listing.photo_main.url }}
Um problema identificado é com relação a pontuação de números, o Django disponibiliza um app para isso, que não é adicionado automaticamente, para isso, devemos adicionar ao 'settings' o app:
-- 'django.contrib.humanize',
O 'humanize' deve ser ativado no template para ser utilizado:
-- {% load humanize %}
Para poder ser usado nos campos de valor, no caso, colocar a pontuação de milhar, podemos usar:
-- {{ listing.price | intcomma }} (O '| intcomma' é o trecho do humanize)
OBS: Podemos ativar a localização dentro de settings, porque no caso, nos EUA o milhar é ',' e não o '.' como no português.
--  USE_L10N = True e USE_THOUSAND_SEPARATOR = True
Como o 'listings' tem uma relação com 'realtors', podemos usar este relacionamento para chamar os atributos dos realtors no template do listings:
-- {{ listing.realtor }} (como definimos o campo principal do modelo do realtor como nome, o código escrito irá mostrar essa coluna)
Para diferença de dias, podemos usar o humanize:
-- {{ listing.list_date | timesince }} (O '| timesince' é o trecho do humanize)
-- {% url 'listing' listing.id %}

>>> A próxima etapa é adicionar a paginação, neste caso, no template do 'listings'. Para isso, devemos adicionar ao método que queremos na 'views.py'.
-- paginator = Paginator(listings, 3) --- Onde 3 é o número de itens por página.
page = request.GET.get('page')
paged_listings = paginator.get_page(page)

>>> No template do 'listings', que é onde queremos a paginação no momento, podemos colocar o template em um looping, utilizando as classes bootstrap para manter a aparência que desejamos. 
A ideia da paginação é verificar por etapas a existência de cada elemento, ou seja, queremos um markup como: '<123>', então devemos verificar se existe o antes ('<'), o meio ('123') e o fim ('>'). E lidar com os pormenores, como chegar no fim e no início da lista, o botão deve estar desabilitado.
No template, podemos verificar por 'if' uma série de situações, como:
-- {% if listings.has_other_pages %}
-- {% if listings.has_previous %} ou {% if listings.has_next %}
Existem propriedades que auxiliam nosso template, como obter o número da página anterior:
-- {{ listings.previous_page_number }} ou {{ listings.next_page_number }}
Podemos realizar o looping para determinar a quantidade de páginas necessárias:
-- {% for page_number in listings.paginator.page_range %}

>>> Depois desenvolvemos o template do 'home, index' do app 'pages', para apresentar os 3 últimos imóveis adicionados ao BD. O código é bem similar ao que desenvolvemos anteriormente, com adição da notação '[:3]' para pegarmos apenas os 3 últimos:
-- [ORM].objects.order_by(-[campo_de_data])[:3]

>>> Agora iremos atualizar no template do 'about.html', com as informações do vendedor do mês, então precisamos do modelo dos 'realtors' dentro do app 'pages'. O código segue o mesmo esquema que anteriormente.

>>> O próximo template a ser alterado é o do 'listing', no singular. Como podemos passar o ID do listing que queremos por URL, foi interessante utilizarmos o método do Django abaixo, pois caso entremos com um ID inexistente, a página não será carregada:
-- get_object_or_404([modelo], pk=[id, ou chave])
Como cada imóvel pode ter ou não as 6 fotos possíveis, resolvemos criar um segundo objeto contendo estas fotos e passá-las pelo 'context' ao template. Ao invés de fazer um 'if' para cada foto. Cabe ressaltar que usamos o método do próprio Python para isso, que nos permite obter a 'url' da photo:
-- getattr([modelo], [coluna desejada]).url

>>> Um outro template que poderia melhorar é o 'index.html', pois o form do search utiliza as opções diretamente pelo html, sendo que poderíamos passá-las por lisa / dicionario pelo Python ao template.
Para isso, criamos um módulo chamado 'choices.py' dentro do app 'listings' e criamos as opções por lá, posteriormente passamos esses dados para a view do app 'pages' usar.
Alteramos o 'index.html' de forma a utilizar essas novas opções de forma dinâmica, reduzindo o tamanho do html consideravelmente.
. OBS: Devemos usar o '.items', sem '()', para acessar ambas as chaves e os valores de um dicionário no Jinja.
-- {% for key, val in state_choices.items %}

>>> Diferente do que foi feito no curso, iremos criar um 'partials' para colocar nosso form do search, uma vez que ele é usado tanto no 'index.html', quanto na própria página do 'search.html', importando esta funcionalidade dentro dos respectivos htmls.
. OBS: Cabe mencionar que o 'partials' recebe todo o conteúdo do 'context' que aquele template está recebendo, desta forma, se o template do index e do search estão recebendo os dicionários do 'choices.py', isso significa que o partials irá recebê-los também, não sendo necessário a inclusão deles no 'urls.py' nem nada assim.

>>> Ainda no app 'listings', e no partials '_search_form.html', agora iremos adicionar a funcionalidade do search. Primeiro verificamos se o campo foi preenchido, através do método 'GET' recebido, obtemos o respectivo valor, e filtramos a base por este valor.
Cabe ressaltar que no caso de valores que serão procurados dentro de um campo texto (como um 'like' do SQL, ou 'contains'), ou seja, devemos usar a notação:
-- [objeto].filter([campo]__icontains=[valor])
Para os casos que queremos exatamente o mesmo valor:
-- [campo]__iexact=[valor]
Para os casos que queremos menor que, incluindo:
-- [campo]__lte=[valor] ('lte' é 'less then or equal to')

>>> Uma outra funcionalidade interessante de se ter, é a de manter o formulário do search preenchido com a pesquisa anterior, para isso, passamos o 'request.GET' para o template e lidamos no template com os respectivos valores, onde podemos colocar no html:
-- value="{{ [campo do context].[parâmetro do GET] }}"
Para os casos que possuem opções (tag 'options' do html), devemos adicionar um condicional verificando o conteúdo do for que fizemos.
-- {% if [chave do dicionario] == values.[valor] %}

>>> Agora iremos adicionar a funcionalidade de login e autenticação em nosso sitema. 
Primeiro iremos criar o app 'accounts' e adicioná-lo como sendo um 'app' dentro dos 'settings.py'.
Em seguida, iremos adicionar os templates de 'login', 'register' e 'dashboard', e criaremos uma rota para eles no módulo de 'urls.py' no próprio app. Criando os respectivos métodos no módulo 'views.py'.
. OBS: Para a funcionalidade de 'logout', usamos um outro método do Django, que é o 'redirect'. É interessante apontar que não precisamos importar nada, além do método, para redirecionarmos para a url do app 'pages':
-- return redirect('index')

>>> Em seguida, adicionamos o conteúdo html aos respectivos templates.
Como agora estamos lidando com a funcionalidade de login e registro, iremos lidar com métodos POST. Para isso, podemos linkar o nosso método da view com o template pela tag 'action' do html, e assim lidar com os dados na própria view mesmo.
. OBS: Por padrão o form irá enviar por 'GET', e não por 'POST'.
-- <form action="{{ url 'register' }}" method="POST">
Um método de segurança que podemos implementar no envio dos forms é o 'csfr', para previnir envio informações fraudulentas. O csrf linka o envio do form a sessão do usuário, o Django adiciona um elemento 'hidden' com um token específico a aquela sessão. Para isso, basta acrescentar abaixo do form:
-- {% csrf_token %}
Em seguida seguimos com a verificação do form dentro da view. No caso, queremos ver se o usuário está enviando um formulário ou se ele está entrando na página, uma vez que ambas ações usam o mesmo método na 'views.py', ambas ações retornam algo diferente a página.

>>> Uma outra funcionalidade que queremos adicionar aos 'forms' é a de mensagem, uma pequena tela que aparecerá para informar algum erro ou sucesso.
O Django já possui esta funcionalidade pronta, que só precisa ser ativada e configurda no 'settings.py'.
. OBS: É possível realizar algumas customizações de funcionalidade, como a cor dos erros, que podemos colocar como a cor que usamos no 'danger' do 'bootstrap'.
Para facilitar o uso das mensagens, criamos um partials com nome de '_alerts.html'. Dentro do html podemos usar a variável 'messages' para capturar as mensagens e alertas.
. OBS: Usamos o redirect no template de 'register' para testar a funcionalidade, usando o método 'POST' dele.
Poderíamos colocar um efeito de 'fade out' na mensagem, mas optamos por não fazer.

>>> O próximo passo agora é obter os valores que são enviados pelo form, que podem ser obtidos diretamente pelo método 'POST':
-- first_name = request.POST['first_name']
Em seguida checamos as informações conforme as regras, ou seja, a senha deve ser a mesma da confirmação, etc. 
Uma verificação que podemos fazer é se o usuário existe no sistema, para isso podemos importar o modelo de 'auth' e tentar identificar lá:
-- User.objects.filter(username=username).exists()
Caso tudo esteja correto, criamos usuários com os dados fornecidos no formulário.
Agora temos uma opção, podemos fazer com que o usuário logue após o registro ou não. Iremos fazer com que ele logue para termos um exemplo da funcionalidade:
-- auth.login(request, user)

>>> Agora iremos desenvolver a parte de 'login' do sistema, que não foge muito do que foi desenvolvido.
Devemos obter os campos do form e validar as credenciais, usando os próprios métodos do django.

>>> Com o login no site, queremos que o navbar apresente apenas a opção de 'logout', que não mostre mais as opções de 'register' e 'login'.
Para isso, colocamos um condicional no respectivo parcials:
-- {% if user.is_authenticated %}

>>> Para o logout podemos fazer o processo similar ao login, usando os métodos próprios do django.

>>> Com todos os templates devidamente criados, é interesante programarmos o nosso site para mudar o 'title' de forma dinâmica, pois isso pode ajudar em alguns pontos, como no caso do robô do Google, que mostra o resultado como sendo o conteúdo do 'title'. Para isso devemos apenas acrescentar o código abaixo em nosso 'base.html':
-- {% block title %}
E em cada template, adicionamos o título que desejamos acrescentar:
{% block title %} | [Título que queremos dar a página]{% endblock %}

>>> Com isso, agora temos de modificar o modal do 'inquiry', e temos de guardar as informações / perguntas que serão feitas por lá, para isso criaremos mais um app, chamado 'contacts'.